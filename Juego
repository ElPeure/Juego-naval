#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>

#define NUM_JUGADORES_MAX 10
    int ataques_x[NUM_JUGADORES_MAX];
    int ataques_y[NUM_JUGADORES_MAX];
    int n = 0;
    pid_t pids[NUM_JUGADORES_MAX];

void Tablero_Posiciones(int tablero_vacio[10][10]) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            tablero_vacio[i][j] = -1; // Espacio no ocupado
        }
    }
}

void Imprimir_tabla(int tablero_vacio[10][10]) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(" %d", tablero_vacio[i][j]);
        }
        printf("\n");
    }
}

bool ExistenBarcosRestantes(int tablero_vacio[10][10]) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (tablero_vacio[i][j] != -1) {
                return true;
            }
        }
    }
    return false;
}

void ColocarBarco(int x, int y, int tam, int tablero_vacio[10][10]) {
    for (int i = 0; i < tam; i++) {
        tablero_vacio[x + i][y] = 1; // Marcar posición como ocupada por el barco
    }
}

void CrearTablero(int tablero_vacio[10][10]) {
    int tam_barcos[] = {4, 3, 3, 2, 2};
    for (int i = 0; i < 5; i++) {
        bool colocado = false;
        while (!colocado) {
            int x = rand() % 10;
            int y = rand() % 10;
            bool horizontal = rand() % 2 == 0;

            if (horizontal && (x + tam_barcos[i] <= 10)) {
                colocado = true;
                for (int j = 0; j < tam_barcos[i]; j++) {
                    if (tablero_vacio[x + j][y] != -1) {
                        colocado = false;
                        break;
                    }
                }
                if (colocado) {
                    ColocarBarco(x, y, tam_barcos[i], tablero_vacio);
                }
            } else if (!horizontal && (y + tam_barcos[i] <= 10)) {
                colocado = true;
                for (int j = 0; j < tam_barcos[i]; j++) {
                    if (tablero_vacio[x][y + j] != -1) {
                        colocado = false;
                        break;
                    }
                }
                if (colocado) {
                    ColocarBarco(x, y, tam_barcos[i], tablero_vacio);
                }
            }
        }
    }
}

void Atacar(int id, int tablero_vacio[10][10], int ataque_x, int ataque_y) {
    if (tablero_vacio[ataque_x][ataque_y] != -1) {
        tablero_vacio[ataque_x][ataque_y] = -1; // Marcar posición como no ocupada
        printf("El Jugador %d atacó en la posición (%d, %d)\n", id, ataque_x, ataque_y);
        printf("Barco golpeado por el Jugador %d!\n", id);
        
        if (!ExistenBarcosRestantes(tablero_vacio)) {
            printf("El Jugador %d ha ganado!\n", id);
            exit(0); // Terminar el juego
        }
    } else {
        printf("El Jugador %d atacó en la posición (%d, %d)\n", id, ataque_x, ataque_y);
        printf("Agua...\n");
    }
}

int main() {
    srand(time(NULL));

    int tablero[10][10];
    int Numero_jugadores; 

    printf("Cuantos jugadores quiere que hayan? solo puede haber entre 2 y 10 jugadores \n");
    scanf("%d", &Numero_jugadores);

    if(Numero_jugadores > 10 || Numero_jugadores < 2 ){
        printf("Ese no era el trato po comadre \n");
        n = 1;
    }

    int Valores_Jugadores[Numero_jugadores*2];

     if(n == 0){

        for (int i = 0; i < Numero_jugadores; i++) {
        pids[i] = fork();
        if (pids[i] == 0) { // Proceso hijo
            int id = i + 1;
            printf("Jugador %d creado\n", id);
            Tablero_Posiciones(tablero);
            CrearTablero(tablero);

            sleep(0.1);
            while (true) {

            for (int i = 0; i < Numero_jugadores*2; i++) {
                Valores_Jugadores[i] = rand() % 10;
            }
        
            for (int  i = 0; i < Numero_jugadores; i++)
            {
                ataques_x[i] = Valores_Jugadores[i];
                ataques_y[i] = Valores_Jugadores[Numero_jugadores];
            }

                int ataque_x = ataques_x[id - 1];
                int ataque_y = ataques_y[id - 1];

                Atacar(id, tablero, ataque_x, ataque_y);


                sleep(0.1); // Espera entre ataques
            }
            exit(0); // Salir del proceso hijo
        }
    }

    // Esperar a que todos los hijos terminen 
    for (int i = 0; i < Numero_jugadores; i++) {
        wait(NULL);
    }

     }

    return 0;
}
